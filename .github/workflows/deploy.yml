name: Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # Manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Validation job - runs on all triggers (PR, push, manual)
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test

  # Deployment job - runs on self-hosted runner (only for main branch push or manual)
  deploy:
    runs-on: [self-hosted, linux, x64]
    needs: validate
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy to production
        env:
          DOCKER_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          echo "üöÄ Starting deployment on self-hosted runner..."
          
          # Stop existing container gracefully
          if docker ps -q -f name=team-tasks; then
            echo "Stopping existing container..."
            docker stop team-tasks --time=10 || true
            docker rm team-tasks || true
          fi
          
          # Clean up unused images to save space
          docker image prune -f
          
          # Pull latest image
          echo "üì¶ Pulling latest Docker image..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Run new container
          echo "üèÉ Starting new container..."
          docker run -d \
            --name team-tasks \
            --restart unless-stopped \
            -p 3000:3000 \
            -e SUPABASE_URL="${{ secrets.SUPABASE_URL }}" \
            -e SUPABASE_ANON_KEY="${{ secrets.SUPABASE_ANON_KEY }}" \
            -e NODE_ENV=production \
            --health-cmd="curl -f http://localhost:3000/api/healthz || exit 1" \
            --health-interval=30s \
            --health-timeout=10s \
            --health-retries=3 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Wait for container to be healthy
          echo "‚è≥ Waiting for container to be healthy..."
          timeout 120 bash -c 'until docker inspect --format="{{.State.Health.Status}}" team-tasks | grep -q healthy; do echo "Waiting for health check..."; sleep 5; done' || {
            echo "‚ùå Health check failed. Container logs:"
            docker logs team-tasks --tail 50
            exit 1
          }
          
          echo "‚úÖ Container is healthy!"

      - name: Verify deployment
        run: |
          # Test local access
          echo "üîç Testing local access..."
          curl -f http://localhost:3000/api/healthz || {
            echo "‚ùå Local health check failed"
            exit 1
          }
          
          # Test external access
          echo "üåê Testing external access..."
          sleep 10
          curl -f -m 30 http://52.55.88.75:3000/api/healthz || {
            echo "‚ùå External health check failed"
            exit 1
          }
          
          echo "üéâ Deployment successful!"
          echo "üì± App is accessible at: http://52.55.88.75:3000"
          echo "üíö Health endpoint: http://52.55.88.75:3000/api/healthz"

      - name: Cleanup
        if: always()
        run: |
          # Clean up old images (keep last 3)
          docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}" | tail -n +4 | awk '{print $2}' | head -n -3 | xargs -r docker rmi || true
          
          echo "üßπ Cleanup completed"
